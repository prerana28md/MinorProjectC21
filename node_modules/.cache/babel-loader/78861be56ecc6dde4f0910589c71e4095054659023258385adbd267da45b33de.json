{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: 'http://127.0.0.1:5000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('username');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Authentication APIs\nexport const authAPI = {\n  register: userData => api.post('/register', userData),\n  login: credentials => api.post('/login', credentials),\n  getUserInterests: username => api.get(`/user/${username}/interests`),\n  updateUserInterests: (username, interests) => api.post(`/user/${username}/interests`, interests)\n};\n\n// Data APIs\nexport const dataAPI = {\n  getStates: () => api.get('/states'),\n  getStateDetails: stateName => api.get(`/states/${stateName}`),\n  getStateCities: stateName => api.get(`/states/${stateName}/cities`),\n  getStateRisk: stateName => api.get(`/states/${stateName}/risk`),\n  getStateTourismTrends: stateName => api.get(`/states/${stateName}/tourism_trends`),\n  getCityDetails: (stateName, cityName) => api.get(`/states/${stateName}/cities/${cityName}`)\n};\n\n// AI & Comparison APIs\nexport const aiAPI = {\n  getRecommendations: params => api.get('/recommend', {\n    params\n  }),\n  postRecommendations: data => api.post('/recommend', data),\n  compareStates: (state1, state2) => api.get(`/compare/states?state1=${state1}&state2=${state2}`),\n  compareCities: (state1, city1, state2, city2) => api.get(`/compare/cities?state1=${state1}&city1=${city1}&state2=${state2}&city2=${city2}`)\n};\n\n// Weather APIs\nexport const weatherAPI = {\n  getCityWeather: cityName => api.get(`/weather/city/${cityName}`),\n  getStateWeather: stateName => api.get(`/weather/state/${stateName}`)\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","register","userData","post","login","credentials","getUserInterests","username","get","updateUserInterests","interests","dataAPI","getStates","getStateDetails","stateName","getStateCities","getStateRisk","getStateTourismTrends","getCityDetails","cityName","aiAPI","getRecommendations","params","postRecommendations","data","compareStates","state1","state2","compareCities","city1","city2","weatherAPI","getCityWeather","getStateWeather"],"sources":["C:/Users/prera/OneDrive/Desktop/MinorProjectC21/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with base URL\r\nconst api = axios.create({\r\n  baseURL: 'http://127.0.0.1:5000',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token if available\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle common errors\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('username');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Authentication APIs\r\nexport const authAPI = {\r\n  register: (userData) => api.post('/register', userData),\r\n  login: (credentials) => api.post('/login', credentials),\r\n  getUserInterests: (username) => api.get(`/user/${username}/interests`),\r\n  updateUserInterests: (username, interests) => api.post(`/user/${username}/interests`, interests),\r\n};\r\n\r\n// Data APIs\r\nexport const dataAPI = {\r\n  getStates: () => api.get('/states'),\r\n  getStateDetails: (stateName) => api.get(`/states/${stateName}`),\r\n  getStateCities: (stateName) => api.get(`/states/${stateName}/cities`),\r\n  getStateRisk: (stateName) => api.get(`/states/${stateName}/risk`),\r\n  getStateTourismTrends: (stateName) => api.get(`/states/${stateName}/tourism_trends`),\r\n  getCityDetails: (stateName, cityName) => api.get(`/states/${stateName}/cities/${cityName}`),\r\n};\r\n\r\n// AI & Comparison APIs\r\nexport const aiAPI = {\r\n  getRecommendations: (params) => api.get('/recommend', { params }),\r\n  postRecommendations: (data) => api.post('/recommend', data),\r\n  compareStates: (state1, state2) => api.get(`/compare/states?state1=${state1}&state2=${state2}`),\r\n  compareCities: (state1, city1, state2, city2) => \r\n    api.get(`/compare/cities?state1=${state1}&city1=${city1}&state2=${state2}&city2=${city2}`),\r\n};\r\n\r\n// Weather APIs\r\nexport const weatherAPI = {\r\n  getCityWeather: (cityName) => api.get(`/weather/city/${cityName}`),\r\n  getStateWeather: (stateName) => api.get(`/weather/state/${stateName}`),\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}