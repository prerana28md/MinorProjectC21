{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: 'http://127.0.0.1:5000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('username');\n    window.location.href = '/login';\n  }\n  console.error('API Error:', error);\n  return Promise.reject(error);\n});\n\n// Authentication APIs\nexport const authAPI = {\n  register: userData => api.post('/register', userData),\n  login: credentials => api.post('/login', credentials),\n  getUserInterests: username => api.get(`/user/${username}/interests`),\n  updateUserInterests: (username, interests) => api.post(`/user/${username}/interests`, interests)\n};\n\n// Data APIs\nexport const dataAPI = {\n  getStates: () => api.get('/states'),\n  getStateDetails: stateName => api.get(`/states/${stateName}`),\n  getStateCities: stateName => api.get(`/states/${stateName}/cities`),\n  getStateRisk: stateName => api.get(`/states/${stateName}/risk`),\n  getStateTourismTrends: stateName => api.get(`/states/${stateName}/tourism_trends`),\n  getCityDetails: (stateName, cityName) => api.get(`/states/${stateName}/cities/${cityName}`),\n  getInterests: () => api.get('/interests'),\n  getPredictTrends: stateName => api.get(`/predict_trend/${stateName}`),\n  getPredictTrendsByCategory: (stateName, category) => api.get(`/predict_trend/${stateName}/${category}`)\n};\n\n// Mock data for development (when backend is not available)\nexport const mockDataAPI = {\n  getStates: () => Promise.resolve({\n    data: ['Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chhattisgarh', 'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jharkhand', 'Karnataka', 'Kerala', 'Madhya Pradesh', 'Maharashtra', 'Manipur', 'Meghalaya', 'Mizoram', 'Nagaland', 'Odisha', 'Punjab', 'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Telangana', 'Tripura', 'Uttar Pradesh', 'Uttarakhand', 'West Bengal']\n  }),\n  getStateCities: stateName => {\n    const citiesByState = {\n      'Maharashtra': ['Mumbai', 'Pune', 'Nagpur', 'Nashik', 'Aurangabad', 'Solapur'],\n      'Karnataka': ['Bangalore', 'Mysore', 'Hubli', 'Mangalore', 'Belgaum', 'Gulbarga'],\n      'Tamil Nadu': ['Chennai', 'Coimbatore', 'Madurai', 'Tiruchirappalli', 'Salem', 'Tirunelveli'],\n      'Gujarat': ['Ahmedabad', 'Surat', 'Vadodara', 'Rajkot', 'Bhavnagar', 'Jamnagar'],\n      'Rajasthan': ['Jaipur', 'Jodhpur', 'Udaipur', 'Kota', 'Bikaner', 'Ajmer'],\n      'Uttar Pradesh': ['Lucknow', 'Kanpur', 'Agra', 'Varanasi', 'Meerut', 'Allahabad'],\n      'West Bengal': ['Kolkata', 'Howrah', 'Durgapur', 'Asansol', 'Siliguri', 'Bardhaman'],\n      'Madhya Pradesh': ['Bhopal', 'Indore', 'Gwalior', 'Jabalpur', 'Ujjain', 'Sagar'],\n      'Kerala': ['Thiruvananthapuram', 'Kochi', 'Kozhikode', 'Thrissur', 'Palakkad', 'Kollam'],\n      'Punjab': ['Chandigarh', 'Ludhiana', 'Amritsar', 'Jalandhar', 'Patiala', 'Bathinda']\n    };\n    return Promise.resolve({\n      data: citiesByState[stateName] || ['No cities available']\n    });\n  },\n  getStateDetails: stateName => Promise.resolve({\n    data: {\n      name: stateName,\n      capital: 'Capital City',\n      population: Math.floor(Math.random() * 50000000) + 10000000,\n      best_month: ['January', 'February', 'March', 'October', 'November', 'December'][Math.floor(Math.random() * 6)],\n      top_category: ['Hill Station', 'Beach', 'Heritage', 'Adventure', 'Spiritual'][Math.floor(Math.random() * 5)]\n    }\n  }),\n  getStateRisk: stateName => Promise.resolve({\n    data: {\n      risks: [{\n        type: 'Flood',\n        level: Math.floor(Math.random() * 5) + 1\n      }, {\n        type: 'Earthquake',\n        level: Math.floor(Math.random() * 5) + 1\n      }, {\n        type: 'Cyclone',\n        level: Math.floor(Math.random() * 5) + 1\n      }, {\n        type: 'Drought',\n        level: Math.floor(Math.random() * 5) + 1\n      }, {\n        type: 'Landslide',\n        level: Math.floor(Math.random() * 5) + 1\n      }]\n    }\n  }),\n  getStateTourismTrends: stateName => Promise.resolve({\n    data: {\n      trends: [{\n        year: '2019',\n        arrivals: Math.floor(Math.random() * 1000000) + 500000\n      }, {\n        year: '2020',\n        arrivals: Math.floor(Math.random() * 800000) + 300000\n      }, {\n        year: '2021',\n        arrivals: Math.floor(Math.random() * 1200000) + 600000\n      }, {\n        year: '2022',\n        arrivals: Math.floor(Math.random() * 1500000) + 800000\n      }, {\n        year: '2023',\n        arrivals: Math.floor(Math.random() * 1800000) + 1000000\n      }]\n    }\n  }),\n  getCityDetails: (stateName, cityName) => Promise.resolve({\n    data: {\n      name: cityName,\n      state: stateName,\n      population: Math.floor(Math.random() * 5000000) + 100000,\n      best_month: ['January', 'February', 'March', 'October', 'November', 'December'][Math.floor(Math.random() * 6)],\n      top_category: ['Hill Station', 'Beach', 'Heritage', 'Adventure', 'Spiritual'][Math.floor(Math.random() * 5)],\n      attractions: ['Temple', 'Museum', 'Park', 'Market', 'Monument'].slice(0, Math.floor(Math.random() * 3) + 2)\n    }\n  })\n};\n\n// AI & Comparison APIs\nexport const aiAPI = {\n  getRecommendations: params => api.get('/recommend', {\n    params\n  }),\n  postRecommendations: data => api.post('/recommend', data),\n  compareStates: (state1, state2) => api.get(`/compare/states?state1=${state1}&state2=${state2}`),\n  compareCities: (state1, city1, state2, city2) => api.get(`/compare/cities?state1=${state1}&city1=${city1}&state2=${state2}&city2=${city2}`)\n};\n\n// Mock AI & Comparison APIs\nexport const mockAiAPI = {\n  compareStates: (state1, state2) => Promise.resolve({\n    data: {\n      state1_data: {\n        name: state1,\n        tourism_growth: Math.floor(Math.random() * 20) + 5,\n        risk_index: Math.floor(Math.random() * 10) + 1,\n        visitor_count: Math.floor(Math.random() * 5000000) + 1000000,\n        top_category: ['Hill Station', 'Beach', 'Heritage', 'Adventure', 'Spiritual'][Math.floor(Math.random() * 5)],\n        best_month: ['January', 'February', 'March', 'October', 'November', 'December'][Math.floor(Math.random() * 6)]\n      },\n      state2_data: {\n        name: state2,\n        tourism_growth: Math.floor(Math.random() * 20) + 5,\n        risk_index: Math.floor(Math.random() * 10) + 1,\n        visitor_count: Math.floor(Math.random() * 5000000) + 1000000,\n        top_category: ['Hill Station', 'Beach', 'Heritage', 'Adventure', 'Spiritual'][Math.floor(Math.random() * 5)],\n        best_month: ['January', 'February', 'March', 'October', 'November', 'December'][Math.floor(Math.random() * 6)]\n      }\n    }\n  }),\n  compareCities: (state1, city1, state2, city2) => Promise.resolve({\n    data: {\n      state1_data: {\n        name: city1,\n        state: state1,\n        tourism_growth: Math.floor(Math.random() * 20) + 5,\n        risk_index: Math.floor(Math.random() * 10) + 1,\n        visitor_count: Math.floor(Math.random() * 1000000) + 100000,\n        top_category: ['Hill Station', 'Beach', 'Heritage', 'Adventure', 'Spiritual'][Math.floor(Math.random() * 5)],\n        best_month: ['January', 'February', 'March', 'October', 'November', 'December'][Math.floor(Math.random() * 6)]\n      },\n      state2_data: {\n        name: city2,\n        state: state2,\n        tourism_growth: Math.floor(Math.random() * 20) + 5,\n        risk_index: Math.floor(Math.random() * 10) + 1,\n        visitor_count: Math.floor(Math.random() * 1000000) + 100000,\n        top_category: ['Hill Station', 'Beach', 'Heritage', 'Adventure', 'Spiritual'][Math.floor(Math.random() * 5)],\n        best_month: ['January', 'February', 'March', 'October', 'November', 'December'][Math.floor(Math.random() * 6)]\n      }\n    }\n  }),\n  getRecommendations: params => Promise.resolve({\n    data: {\n      recommendations: [{\n        state: 'Kerala',\n        city: 'Kochi',\n        rating: 4.5,\n        risk_index: 3,\n        best_month: 'December',\n        category: 'Beach'\n      }, {\n        state: 'Himachal Pradesh',\n        city: 'Shimla',\n        rating: 4.3,\n        risk_index: 2,\n        best_month: 'May',\n        category: 'Hill Station'\n      }, {\n        state: 'Rajasthan',\n        city: 'Jaipur',\n        rating: 4.2,\n        risk_index: 4,\n        best_month: 'October',\n        category: 'Heritage'\n      }]\n    }\n  })\n};\n\n// Weather APIs\nexport const weatherAPI = {\n  getCityWeather: cityName => api.get(`/weather/city/${cityName}`),\n  getStateWeather: stateName => api.get(`/weather/state/${stateName}`)\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","console","authAPI","register","userData","post","login","credentials","getUserInterests","username","get","updateUserInterests","interests","dataAPI","getStates","getStateDetails","stateName","getStateCities","getStateRisk","getStateTourismTrends","getCityDetails","cityName","getInterests","getPredictTrends","getPredictTrendsByCategory","category","mockDataAPI","resolve","data","citiesByState","name","capital","population","Math","floor","random","best_month","top_category","risks","type","level","trends","year","arrivals","state","attractions","slice","aiAPI","getRecommendations","params","postRecommendations","compareStates","state1","state2","compareCities","city1","city2","mockAiAPI","state1_data","tourism_growth","risk_index","visitor_count","state2_data","recommendations","city","rating","weatherAPI","getCityWeather","getStateWeather"],"sources":["C:/Users/prera/OneDrive/Desktop/MinorProjectC21/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: 'http://127.0.0.1:5000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token if available\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('username');\n      window.location.href = '/login';\n    }\n    console.error('API Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Authentication APIs\nexport const authAPI = {\n  register: (userData) => api.post('/register', userData),\n  login: (credentials) => api.post('/login', credentials),\n  getUserInterests: (username) => api.get(`/user/${username}/interests`),\n  updateUserInterests: (username, interests) => api.post(`/user/${username}/interests`, interests),\n};\n\n// Data APIs\nexport const dataAPI = {\n  getStates: () => api.get('/states'),\n  getStateDetails: (stateName) => api.get(`/states/${stateName}`),\n  getStateCities: (stateName) => api.get(`/states/${stateName}/cities`),\n  getStateRisk: (stateName) => api.get(`/states/${stateName}/risk`),\n  getStateTourismTrends: (stateName) => api.get(`/states/${stateName}/tourism_trends`),\n  getCityDetails: (stateName, cityName) => api.get(`/states/${stateName}/cities/${cityName}`),\n  getInterests: () => api.get('/interests'),\n  getPredictTrends: (stateName) => api.get(`/predict_trend/${stateName}`),\n  getPredictTrendsByCategory: (stateName, category) => api.get(`/predict_trend/${stateName}/${category}`),\n};\n\n// Mock data for development (when backend is not available)\nexport const mockDataAPI = {\n  getStates: () => Promise.resolve({\n    data: [\n      'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chhattisgarh',\n      'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jharkhand',\n      'Karnataka', 'Kerala', 'Madhya Pradesh', 'Maharashtra', 'Manipur',\n      'Meghalaya', 'Mizoram', 'Nagaland', 'Odisha', 'Punjab',\n      'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Telangana', 'Tripura',\n      'Uttar Pradesh', 'Uttarakhand', 'West Bengal'\n    ]\n  }),\n  \n  getStateCities: (stateName) => {\n    const citiesByState = {\n      'Maharashtra': ['Mumbai', 'Pune', 'Nagpur', 'Nashik', 'Aurangabad', 'Solapur'],\n      'Karnataka': ['Bangalore', 'Mysore', 'Hubli', 'Mangalore', 'Belgaum', 'Gulbarga'],\n      'Tamil Nadu': ['Chennai', 'Coimbatore', 'Madurai', 'Tiruchirappalli', 'Salem', 'Tirunelveli'],\n      'Gujarat': ['Ahmedabad', 'Surat', 'Vadodara', 'Rajkot', 'Bhavnagar', 'Jamnagar'],\n      'Rajasthan': ['Jaipur', 'Jodhpur', 'Udaipur', 'Kota', 'Bikaner', 'Ajmer'],\n      'Uttar Pradesh': ['Lucknow', 'Kanpur', 'Agra', 'Varanasi', 'Meerut', 'Allahabad'],\n      'West Bengal': ['Kolkata', 'Howrah', 'Durgapur', 'Asansol', 'Siliguri', 'Bardhaman'],\n      'Madhya Pradesh': ['Bhopal', 'Indore', 'Gwalior', 'Jabalpur', 'Ujjain', 'Sagar'],\n      'Kerala': ['Thiruvananthapuram', 'Kochi', 'Kozhikode', 'Thrissur', 'Palakkad', 'Kollam'],\n      'Punjab': ['Chandigarh', 'Ludhiana', 'Amritsar', 'Jalandhar', 'Patiala', 'Bathinda']\n    };\n    \n    return Promise.resolve({\n      data: citiesByState[stateName] || ['No cities available']\n    });\n  },\n  \n  getStateDetails: (stateName) => Promise.resolve({\n    data: {\n      name: stateName,\n      capital: 'Capital City',\n      population: Math.floor(Math.random() * 50000000) + 10000000,\n      best_month: ['January', 'February', 'March', 'October', 'November', 'December'][Math.floor(Math.random() * 6)],\n      top_category: ['Hill Station', 'Beach', 'Heritage', 'Adventure', 'Spiritual'][Math.floor(Math.random() * 5)]\n    }\n  }),\n  \n  getStateRisk: (stateName) => Promise.resolve({\n    data: {\n      risks: [\n        { type: 'Flood', level: Math.floor(Math.random() * 5) + 1 },\n        { type: 'Earthquake', level: Math.floor(Math.random() * 5) + 1 },\n        { type: 'Cyclone', level: Math.floor(Math.random() * 5) + 1 },\n        { type: 'Drought', level: Math.floor(Math.random() * 5) + 1 },\n        { type: 'Landslide', level: Math.floor(Math.random() * 5) + 1 }\n      ]\n    }\n  }),\n  \n  getStateTourismTrends: (stateName) => Promise.resolve({\n    data: {\n      trends: [\n        { year: '2019', arrivals: Math.floor(Math.random() * 1000000) + 500000 },\n        { year: '2020', arrivals: Math.floor(Math.random() * 800000) + 300000 },\n        { year: '2021', arrivals: Math.floor(Math.random() * 1200000) + 600000 },\n        { year: '2022', arrivals: Math.floor(Math.random() * 1500000) + 800000 },\n        { year: '2023', arrivals: Math.floor(Math.random() * 1800000) + 1000000 }\n      ]\n    }\n  }),\n  \n  getCityDetails: (stateName, cityName) => Promise.resolve({\n    data: {\n      name: cityName,\n      state: stateName,\n      population: Math.floor(Math.random() * 5000000) + 100000,\n      best_month: ['January', 'February', 'March', 'October', 'November', 'December'][Math.floor(Math.random() * 6)],\n      top_category: ['Hill Station', 'Beach', 'Heritage', 'Adventure', 'Spiritual'][Math.floor(Math.random() * 5)],\n      attractions: ['Temple', 'Museum', 'Park', 'Market', 'Monument'].slice(0, Math.floor(Math.random() * 3) + 2)\n    }\n  })\n};\n\n// AI & Comparison APIs\nexport const aiAPI = {\n  getRecommendations: (params) => api.get('/recommend', { params }),\n  postRecommendations: (data) => api.post('/recommend', data),\n  compareStates: (state1, state2) => api.get(`/compare/states?state1=${state1}&state2=${state2}`),\n  compareCities: (state1, city1, state2, city2) => \n    api.get(`/compare/cities?state1=${state1}&city1=${city1}&state2=${state2}&city2=${city2}`),\n};\n\n// Mock AI & Comparison APIs\nexport const mockAiAPI = {\n  compareStates: (state1, state2) => Promise.resolve({\n    data: {\n      state1_data: {\n        name: state1,\n        tourism_growth: Math.floor(Math.random() * 20) + 5,\n        risk_index: Math.floor(Math.random() * 10) + 1,\n        visitor_count: Math.floor(Math.random() * 5000000) + 1000000,\n        top_category: ['Hill Station', 'Beach', 'Heritage', 'Adventure', 'Spiritual'][Math.floor(Math.random() * 5)],\n        best_month: ['January', 'February', 'March', 'October', 'November', 'December'][Math.floor(Math.random() * 6)]\n      },\n      state2_data: {\n        name: state2,\n        tourism_growth: Math.floor(Math.random() * 20) + 5,\n        risk_index: Math.floor(Math.random() * 10) + 1,\n        visitor_count: Math.floor(Math.random() * 5000000) + 1000000,\n        top_category: ['Hill Station', 'Beach', 'Heritage', 'Adventure', 'Spiritual'][Math.floor(Math.random() * 5)],\n        best_month: ['January', 'February', 'March', 'October', 'November', 'December'][Math.floor(Math.random() * 6)]\n      }\n    }\n  }),\n  \n  compareCities: (state1, city1, state2, city2) => Promise.resolve({\n    data: {\n      state1_data: {\n        name: city1,\n        state: state1,\n        tourism_growth: Math.floor(Math.random() * 20) + 5,\n        risk_index: Math.floor(Math.random() * 10) + 1,\n        visitor_count: Math.floor(Math.random() * 1000000) + 100000,\n        top_category: ['Hill Station', 'Beach', 'Heritage', 'Adventure', 'Spiritual'][Math.floor(Math.random() * 5)],\n        best_month: ['January', 'February', 'March', 'October', 'November', 'December'][Math.floor(Math.random() * 6)]\n      },\n      state2_data: {\n        name: city2,\n        state: state2,\n        tourism_growth: Math.floor(Math.random() * 20) + 5,\n        risk_index: Math.floor(Math.random() * 10) + 1,\n        visitor_count: Math.floor(Math.random() * 1000000) + 100000,\n        top_category: ['Hill Station', 'Beach', 'Heritage', 'Adventure', 'Spiritual'][Math.floor(Math.random() * 5)],\n        best_month: ['January', 'February', 'March', 'October', 'November', 'December'][Math.floor(Math.random() * 6)]\n      }\n    }\n  }),\n  \n  getRecommendations: (params) => Promise.resolve({\n    data: {\n      recommendations: [\n        {\n          state: 'Kerala',\n          city: 'Kochi',\n          rating: 4.5,\n          risk_index: 3,\n          best_month: 'December',\n          category: 'Beach'\n        },\n        {\n          state: 'Himachal Pradesh',\n          city: 'Shimla',\n          rating: 4.3,\n          risk_index: 2,\n          best_month: 'May',\n          category: 'Hill Station'\n        },\n        {\n          state: 'Rajasthan',\n          city: 'Jaipur',\n          rating: 4.2,\n          risk_index: 4,\n          best_month: 'October',\n          category: 'Heritage'\n        }\n      ]\n    }\n  })\n};\n\n// Weather APIs\nexport const weatherAPI = {\n  getCityWeather: (cityName) => api.get(`/weather/city/${cityName}`),\n  getStateWeather: (stateName) => api.get(`/weather/state/${stateName}`),\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}